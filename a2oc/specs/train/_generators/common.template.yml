################################################################################
# Experiments
################################################################################

# The default properties for each experiment
experiment_default:
  envs:
    # Names
    NAME: {name}
    # Training arguments
    ENV_ID: {env_id}
    # Project directory
    PROJECT_DIR: "$HOME/a2oc"
    # Copied from "scripts/_common/set_common_variables.sh"
    CONDA_ENV_NAME: a2oc
    ROOT_LOGS_DIR: logs
    ROOT_MODELS_DIR: models
    ROOT_ZIPS_DIR: zips
    # Copied from "scripts/train/_common/init_training_variables.sh"
    SUB_DIR: "$NAME/env_id-$ENV_ID/seed-$SEED"
    TMUX_SESSION_NAME: "train/$CONDA_ENV_NAME/${{SUB_DIR//./,}}"
    PROJECT_TMUX_SESSION_PATTERN: "train/$CONDA_ENV_NAME"
    LOG_DIR: "$ROOT_LOGS_DIR/train/$SUB_DIR"
    LOG_STDOUT_PATH: "$LOG_DIR/stdout.log"
    ZIP_PATH: "$ROOT_ZIPS_DIR/${{SUB_DIR////.}}.zip"

# Runs before the start of main experiments
before_all_experiments:
- name: check_old_file
  description: Check whether the old log exists for "stop" and "purge" command types
  commands:
    stop:
    # Check whether the Noodles status file exists
    - >-
      local:[ ! -f "logs/noodles/noodles_status.$NAME.$ENV_ID.yml" ]
      && (echo Has not run experiments yet >&2; exit 1)
      || echo Old experiments detected
    purge:
    # Check whether the Noodles status file exists
    - >-
      local:[ ! -f "logs/noodles/noodles_status.$NAME.$ENV_ID.yml" ]
      && (echo Has not run experiments yet >&2; exit 1)
      || echo Old experiments detected

# Runs after the main experiments have finished
after_all_experiments:
- name: notify
  description: Notify the user by running the notify script if it exists
  commands:
    run: |
      # Run .bash_profile
      test -f $HOME/.bash_profile && source $HOME/.bash_profile
      # Cause the script to exit on any errors
      set -euo pipefail
      # Send email notification (e.g., use mutt)
      test -f "$HOME/notify.sh" && bash "$HOME/notify.sh" "Finished: $NAME" "Download \"$PROJECT_DIR/$ZIP_PATH\" on \"$(hostname)\""

################################################################################
# Servers
################################################################################

# The default properties for each server
server_default:
  # Path to the private key on local
  private_key_path: $HOME/.ssh/id_rsa
  # Username on the server (e.g., 'user1')
  username: $USER

# All servers
servers:
- name: Elsa Kida
  # Hostname of the server (e.g., "server1.example.com", "123.123.123.123")
  hostname: kida
- name: Elsa Lady
  # Hostname of the server (e.g., "server1.example.com", "123.123.123.123")
  hostname: lady

################################################################################
# Requirements
################################################################################

requirements:
  # Check whether the STDOUT log exists
  has_log: "test -f \"$PROJECT_DIR/$LOG_STDOUT_PATH\" && echo -n Yes || echo -n No"
  # Check whether the final zip file exists
  has_zip: "test -f \"$PROJECT_DIR/$ZIP_PATH\" && echo -n Yes || echo -n No"
  # Count the Tmux session
  tmux_count: "tmux ls 2>/dev/null | grep $TMUX_SESSION_NAME | wc -l"
  # Count all Tmux sessions related to the current project
  project_tmux_count: "tmux ls 2>/dev/null | grep $PROJECT_TMUX_SESSION_PATTERN | wc -l"

################################################################################
# Deployment
################################################################################

# Path in each command type, as a string for Noodles to write the current
# deployment status to the file in each deployment round
write_status_to:
  run: logs/noodles/noodles_status.$NAME.$ENV_ID.yml

# The interval to run each deployment round
round_interval: 60

# The interval to deploy each experiment in each round
deployment_interval: 60

# The interval to execute the commands
commands_interval: 10

################################################################################
# Error Handling
################################################################################

# Whether to check any nonzero return code and nonempty stderr and raise error
check_any_errors: True

# List of error handlers
error_handlers:
- name: Ignore ssh_exchange_identification error
  return_code: 255
  stderr_pattern: "^ssh_exchange_identification:.+\\s+$"
  action: retry
- name: Send email when unknown error occurred (Catch all)
  return_code: ".+"
  stderr_pattern: "[\\S\\s]+"
  commands: |
    # Run .bash_profile
    test -f $HOME/.bash_profile && source $HOME/.bash_profile
    # Cause the script to exit on any errors
    set -euo pipefail
    # Send email notification (e.g., use mutt)
    test -f "$HOME/notify.sh" && bash "$HOME/notify.sh" "Error: $NAME" "Unexpected error occurred when running experiment \"$NOODLES_EXPERIMENT_NAME\" on server \"$NOODLES_SERVER_NAME\""
  action: abort
